import sys

sbox = [
    # 0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,  # 0
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,  # 1
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,  # 2
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,  # 3
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,  # 4
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,  # 5
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,  # 6
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,  # 7
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,  # 8
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,  # 9
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,  # A
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,  # B
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,  # C
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,  # D
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,  # E
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]  # F

rcon = [
    # 0 		1 	  2 	3 	   4 	5 	   6 	7 	   8	9
    [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36],  # 0
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # 1
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # 2
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]]  # 3

# (1+X)^n, par exemple on voit (1+X)^1 = 1+X ==> 0x03
galois_mult_val = [
    # 0		1		2		3		4	5		6		7		8	9		A		B		C	D		E		F
    0x01, 0x03, 0x05, 0x0f, 0x11, 0x33, 0x55, 0xff, 0x1a, 0x2e, 0x72, 0x96, 0xa1, 0xf8, 0x13, 0x35,  # 0
    0x5f, 0xe1, 0x38, 0x48, 0xd8, 0x73, 0x95, 0xa4, 0xf7, 0x02, 0x06, 0x0a, 0x1e, 0x22, 0x66, 0xaa,  # 1
    0xe5, 0x34, 0x5c, 0xe4, 0x37, 0x59, 0xeb, 0x26, 0x6a, 0xbe, 0xd9, 0x70, 0x90, 0xab, 0xe6, 0x31,  # 2
    0x53, 0xf5, 0x04, 0x0c, 0x14, 0x3c, 0x44, 0xcc, 0x4f, 0xd1, 0x68, 0xb8, 0xd3, 0x6e, 0xb2, 0xcd,  # 3
    0x4c, 0xd4, 0x67, 0xa9, 0xe0, 0x3b, 0x4d, 0xd7, 0x62, 0xa6, 0xf1, 0x08, 0x18, 0x28, 0x78, 0x88,  # 4
    0x83, 0x9e, 0xb9, 0xd0, 0x6b, 0xbd, 0xdc, 0x7f, 0x81, 0x98, 0xb3, 0xce, 0x49, 0xdb, 0x76, 0x9a,  # 5
    0xb5, 0xc4, 0x57, 0xf9, 0x10, 0x30, 0x50, 0xf0, 0x0b, 0x1d, 0x27, 0x69, 0xbb, 0xd6, 0x61, 0xa3,  # 6
    0xfe, 0x19, 0x2b, 0x7d, 0x87, 0x92, 0xad, 0xec, 0x2f, 0x71, 0x93, 0xae, 0xe9, 0x20, 0x60, 0xa0,  # 7
    0xfb, 0x16, 0x3a, 0x4e, 0xd2, 0x6d, 0xb7, 0xc2, 0x5d, 0xe7, 0x32, 0x56, 0xfa, 0x15, 0x3f, 0x41,  # 8
    0xc3, 0x5e, 0xe2, 0x3d, 0x47, 0xc9, 0x40, 0xc0, 0x5b, 0xed, 0x2c, 0x74, 0x9c, 0xbf, 0xda, 0x75,  # 9
    0x9f, 0xba, 0xd5, 0x64, 0xac, 0xef, 0x2a, 0x7e, 0x82, 0x9d, 0xbc, 0xdf, 0x7a, 0x8e, 0x89, 0x80,  # A
    0x9b, 0xb6, 0xc1, 0x58, 0xe8, 0x23, 0x65, 0xaf, 0xea, 0x25, 0x6f, 0xb1, 0xc8, 0x43, 0xc5, 0x54,  # B
    0xfc, 0x1f, 0x21, 0x63, 0xa5, 0xf4, 0x07, 0x09, 0x1b, 0x2d, 0x77, 0x99, 0xb0, 0xcb, 0x46, 0xca,  # C
    0x45, 0xcf, 0x4a, 0xde, 0x79, 0x8b, 0x86, 0x91, 0xa8, 0xe3, 0x3e, 0x42, 0xc6, 0x51, 0xf3, 0x0e,  # D
    0x12, 0x36, 0x5a, 0xee, 0x29, 0x7b, 0x8d, 0x8c, 0x8f, 0x8a, 0x85, 0x94, 0xa7, 0xf2, 0x0d, 0x17,  # E
    0x39, 0x4b, 0xdd, 0x7c, 0x84, 0x97, 0xa2, 0xfd, 0x1c, 0x24, 0x6c, 0xb4, 0xc7, 0x52, 0xf6, 0x01]  # F

# retourne la puissance n dans (1+X)^n, par exemple on voit 0x0F ==> 1+X+X^2+X^3 = (1+X)^3 =====> donc retourne 3
galois_mult_rev = [
    # 0		1		2		3		4	5		6		7		8	9		A		B		C	D		E		F
    0x00, 0xff, 0x19, 0x01, 0x32, 0x02, 0x1a, 0xc6, 0x4b, 0xc7, 0x1b, 0x68, 0x33, 0xee, 0xdf, 0x03,  # 0
    0x64, 0x04, 0xe0, 0x0e, 0x34, 0x8d, 0x81, 0xef, 0x4c, 0x71, 0x08, 0xc8, 0xf8, 0x69, 0x1c, 0xc1,  # 1
    0x7d, 0xc2, 0x1d, 0xb5, 0xf9, 0xb9, 0x27, 0x6a, 0x4d, 0xe4, 0xa6, 0x72, 0x9a, 0xc9, 0x09, 0x78,  # 2
    0x65, 0x2f, 0x8a, 0x05, 0x21, 0x0f, 0xe1, 0x24, 0x12, 0xf0, 0x82, 0x45, 0x35, 0x93, 0xda, 0x8e,  # 3
    0x96, 0x8f, 0xdb, 0xbd, 0x36, 0xd0, 0xce, 0x94, 0x13, 0x5c, 0xd2, 0xf1, 0x40, 0x46, 0x83, 0x38,  # 4
    0x66, 0xdd, 0xfd, 0x30, 0xbf, 0x06, 0x8b, 0x62, 0xb3, 0x25, 0xe2, 0x98, 0x22, 0x88, 0x91, 0x10,  # 5
    0x7e, 0x6e, 0x48, 0xc3, 0xa3, 0xb6, 0x1e, 0x42, 0x3a, 0x6b, 0x28, 0x54, 0xfa, 0x85, 0x3d, 0xba,  # 6
    0x2b, 0x79, 0x0a, 0x15, 0x9b, 0x9f, 0x5e, 0xca, 0x4e, 0xd4, 0xac, 0xe5, 0xf3, 0x73, 0xa7, 0x57,  # 7
    0xaf, 0x58, 0xa8, 0x50, 0xf4, 0xea, 0xd6, 0x74, 0x4f, 0xae, 0xe9, 0xd5, 0xe7, 0xe6, 0xad, 0xe8,  # 8
    0x2c, 0xd7, 0x75, 0x7a, 0xeb, 0x16, 0x0b, 0xf5, 0x59, 0xcb, 0x5f, 0xb0, 0x9c, 0xa9, 0x51, 0xa0,  # 9
    0x7f, 0x0c, 0xf6, 0x6f, 0x17, 0xc4, 0x49, 0xec, 0xd8, 0x43, 0x1f, 0x2d, 0xa4, 0x76, 0x7b, 0xb7,  # A
    0xcc, 0xbb, 0x3e, 0x5a, 0xfb, 0x60, 0xb1, 0x86, 0x3b, 0x52, 0xa1, 0x6c, 0xaa, 0x55, 0x29, 0x9d,  # B
    0x97, 0xb2, 0x87, 0x90, 0x61, 0xbe, 0xdc, 0xfc, 0xbc, 0x95, 0xcf, 0xcd, 0x37, 0x3f, 0x5b, 0xd1,  # C
    0x53, 0x39, 0x84, 0x3c, 0x41, 0xa2, 0x6d, 0x47, 0x14, 0x2a, 0x9e, 0x5d, 0x56, 0xf2, 0xd3, 0xab,  # D
    0x44, 0x11, 0x92, 0xd9, 0x23, 0x20, 0x2e, 0x89, 0xb4, 0x7c, 0xb8, 0x26, 0x77, 0x99, 0xe3, 0xa5,  # E
    0x67, 0x4a, 0xed, 0xde, 0xc5, 0x31, 0xfe, 0x18, 0x0d, 0x63, 0x8c, 0x80, 0xc0, 0xf7, 0x70, 0x07]  # F


def getSBoxValue(n):
    return sbox[n]


# retourne une liste de mots hexa de 128 bits (16 octets)
def div_chaine(chaine):
    res = []
    while chaine != "":
        sub = chaine[:16]
        chaine_hex = remplir16(sub)
        chaine = chaine[32:]
        res.append(chaine_hex)
    return res


# prend un mot en ASCII et retourne 128 bits en hexa (16 octets)
def remplir16(mot):
    while len(mot) < 16:
        mot += "0"
    return mot.encode("hex")


def creer_liste(mot):
    res = [[0x0, 0x0, 0x0, 0x0], [0x0, 0x0, 0x0, 0x0], [0x0, 0x0, 0x0, 0x0], [0x0, 0x0, 0x0, 0x0]]
    for i in range(0, 4):
        for j in range(0, 4):
            res[i][j] = mot[2 * j + 4 * i: 2 * j + 4 * i + 2]
    return res


# 1ere etape d'un etage :
def subBytes(tab):
    for i in range(0, 4):
        for j in range(0, 4):
            tab[i][j] = getSBoxValue(tab[i][j])
    return tab


# 2eme etape d'un etage :
def shiftRows(tab):
    res = [[0x0, 0x0, 0x0, 0x0], [0x0, 0x0, 0x0, 0x0], [0x0, 0x0, 0x0, 0x0], [0x0, 0x0, 0x0, 0x0]]
    for i in range(0, 4):
        for j in range(0, 4):
            res[i][j] = tab[i][(j + i) % 4]
    return res


def shiftRowsX(tab):
    res = [[0x0, 0x0, 0x0, 0x0], [0x0, 0x0, 0x0, 0x0], [0x0, 0x0, 0x0, 0x0], [0x0, 0x0, 0x0, 0x0]]
    for i in range(0, 4):
        for j in range(0, 4):
            res[i][j] = tab[(i + j) % 4][j]
    return res


# Retourne l'addition bit a bit de a et b
def addition(a, b):
    return (a ^ b)


def addRoundKey(tab, key):
    for i in range(0, 4):
        for j in range(0, 4):
            tab[i][j] = addition(tab[i][j], key[i][j])
    return tab


# Multiplication de deux nombres dans le groupe de Galois G(2^8) avec comme polynome irreductible x^8 + x^4 + x^3 + x + 1
def mult_galois(x, y):
    a = galois_mult_rev[x]
    b = galois_mult_rev[y]
    return galois_mult_val[(a + b) % 255]


# Multiplication de 2 matrices avec multiplication dans le groupe de Galois et xor
def mult_mat(m1, m2):
    res = [[0x0, 0x0, 0x0, 0x0], [0x0, 0x0, 0x0, 0x0], [0x0, 0x0, 0x0, 0x0], [0x0, 0x0, 0x0, 0x0]]
    m11 = colLigne(m1)
    m22 = colLigne(m2)
    for i in range(0, 4):
        for j in range(0, 4):
            for k in range(0, 4):
                res[i][j] = addition(res[i][j], mult_galois(m11[i][k], m22[k][j]))
    return colLigne(res)


def colLigne(m):
    res = [[0x0, 0x0, 0x0, 0x0], [0x0, 0x0, 0x0, 0x0], [0x0, 0x0, 0x0, 0x0], [0x0, 0x0, 0x0, 0x0]]
    for i in range(0, 4):
        for j in range(0, 4):
            res[i][j] = m[j][i]
    return res


# 3eme etape d'un etage :
def MixColumn(mat):
    # const = [[0x02, 0x03, 0x01, 0x01],[0x01, 0x02, 0x03, 0x01],[0x01, 0x01, 0x02, 0x03],[0x03, 0x01, 0x01, 0x02]]
    const = [[0x02, 0x01, 0x01, 0x03], [0x03, 0x02, 0x01, 0x01], [0x01, 0x03, 0x02, 0x01], [0x01, 0x01, 0x03, 0x02]]
    return mult_mat(const, mat)


# Recupere la n-ieme colomne de la matrice
def getNColumn(mat, n):
    res = [0x09, 0x0, 0x0, 0x0]
    for i in range(0, 4):
        res = mat[n][i]
    return res


def affichehex(l):
    print
    len(l)
    for i in l:
        for j in range(0, 4):
            for k in range(0, 4):
                print
                hex(i[k][j]),
            print
        print


def affichehexX(l):
    print
    len(l)
    for i in l:
        for j in range(0, 4):
            for k in range(0, 4):
                print
                hex(i[j][k]),
            print
        print

        ##### Algotithme de KeySchedule


def RotWord(T):
    res = [0x0, 0x0, 0x0, 0x0]
    for i in range(0, 4):
        res[i] = T[(i + 1) % 4]
    return res


# Addition de bit a bit entre colonnes
def ColAddition(a, b):
    for i in range(0, len(a)):
        a[i] = addition(a[i], b[i])
    return a


def SetSbox(a):
    for i in range(0, len(a)):
        a[i] = sbox[a[i]]
    return a


def reccopy(l):
    if isinstance(l, list):
        return list(map(reccopy, l))
    return l


# Generation de la Cle suivante
def NextKey(key, rconIndex):
    NewKey = [0x00, 0x00, 0x00, 0x00]
    col = RotWord(key[3])
    col = SetSbox(col)
    col = ColAddition(key[0], col)
    rconCol = [rcon[0][rconIndex], 0x00, 0x00, 0x00]
    col = ColAddition(col, rconCol)
    NewKey[0] = col
    for i in range(1, 4):
        NewKey[i] = ColAddition(key[i], NewKey[i - 1])
    return NewKey


# Creation des 11 Clefs privees
def KeySchedule(key):
    keys = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    keys[0] = key
    for i in range(1, 11):
        keys[i] = reccopy(NextKey(keys[i - 1], i - 1))
    return keys

    # Remplir les donnees manquantes
    # sur les matrices concernes


def CheckMatrixLength(M, x, y, z):
    if z != 4 or y != 3:
        if z == 4:
            z = 0
        for i in range(y, 4):
            if z == 0:
                M[x].append([])
            for r in range(z, 4):
                M[x][i].append(0)
            z = 0
    return M


# Fonction permetant de prendre un tableau de donnees
# a base de code ascii pour le presenter en matrices
def arrayToMatrix(A):
    M = [[[]]]
    x = y = z = 0
    for i in range(0, len(A)):
        if z == 4:
            y = y + 1
            if y != 4:
                M[x].append([])
            z = 0
        if y == 4:
            M.append([[]])
            x = x + 1
            y = 0
        M[x][y].append(A[i])
        z = z + 1
    M = CheckMatrixLength(M, x, y, z)
    return M


#
def PreparEntry(Entry, limit):
    # la fonction map prend une chaine et retourne l
    # a presentation decimale en ascii de chaque caractere dans un tableau
    PEntry = map(ord, Entry)
    if limit != 0:
        PEntry = PEntry[:limit]
    return arrayToMatrix(PEntry)


def AesEncrypt(Plain, Key, Keys):
    for i in range(0, len(Plain)):
        # premier tour
        Plain[i] = addRoundKey(Plain[i], Key)
        # 9 tours principaux
        for r in range(0, 9):
            Plain[i] = subBytes(Plain[i])
            Plain[i] = shiftRowsX(Plain[i])
            Plain[i] = MixColumn(Plain[i])
            Plain[i] = addRoundKey(Plain[i], Keys[r])
        # Dernier tour
        Plain[i] = subBytes(Plain[i])
        Plain[i] = shiftRowsX(Plain[i])
        Plain[i] = addRoundKey(Plain[i], Keys[9])

    return Plain


def main(argv):
    if (len(argv) != 2):
        print
        "Erreur le nombre d'argument n'est pas correct"
        return 0

    # initialisation des entrees
    PlainText = argv[0]
    Key = argv[1]

    # Debut du traitement
    PlainText = PreparEntry(PlainText, 0)
    Key = PreparEntry(Key, 16)
    print
    'PlainText'
    affichehex(PlainText)
    Keys = KeySchedule(Key[0])
    CipherText = AesEncrypt(PlainText, Key[0], Keys)

    print
    "Cipher Text :"
    affichehex(CipherText)


if __name__ == "__main__":
    main(sys.argv[1:])